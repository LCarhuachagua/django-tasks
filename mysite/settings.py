"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path

# Declara donde está corriendo el proyecto
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# La clave secreta es una cadena aleatoria que se utiliza para cifrar los datos confidenciales de la aplicación. Se utiliza para:
# 1. Crear firmas criptográficas para los datos de sesión y las cookies.
# 2. Deserializar datos de sesión y cookies firmados.
# 3. Proteger contra ataques de fuerza bruta contra las contraseñas de los usuarios.
# 4. Proteger contra ataques de fuerza bruta contra los tokens de reinicio de contraseña.
# 5. Proteger contra ataques de inundación de contraseña.
# 6. Proteger contra ataques de inundación de reinicio de contraseña.
# 7. Proteger contra ataques de inundación de verificación de correo electrónico.
# 8. Proteger contra ataques de inundación de verificación de dos factores.
# 9. Proteger contra ataques de inundación de registro de usuario.
# 10. Proteger contra ataques de inundación de nombre de usuario.
# 11. Proteger contra ataques de inundación de correo electrónico.
# 12. Proteger contra ataques de inundación de contraseña de cambio de usuario.
# 13. Proteger contra ataques de inundación de contraseña de cambio de correo electrónico.
# 14. Proteger contra ataques de inundación de contraseña de cambio de dos factores.
# 15. Proteger contra ataques de inundación de contraseña de cambio de nombre de usuario.
SECRET_KEY = 'django-insecure-j1mtx=*6m71picpd0k7s&_48+3()+(am03=@ej9+eay%$ehz@w'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG es verdadero (es decir, en desarrollo) y si es falso (es decir, en producción).
DEBUG = True
# Para producción es necesario que esté en False, porque sino se puede acceder a la base de datos y a la información de los usuarios.

# Esta variable es una lista de cadenas que representan los nombres de host que se pueden servir por esta instalación de Django. Esta es una característica de seguridad importante. Si DEBUG es verdadero (es decir, en desarrollo), Django permitirá solicitudes arbitrarias de hosts. De lo contrario, Django solo servirá solicitudes de dominios que estén en esta lista.
ALLOWED_HOSTS = []


# Application definition
# INSTALLED_APPS es una lista de cadenas que designan todas las aplicaciones que se activarán en esta instancia de Django. Las aplicaciones pueden usarse en múltiples proyectos y se pueden paquetizar y distribuir para su uso por otros en sus proyectos. Las aplicaciones incluidas por defecto en INSTALLED_APPS son:  django.contrib.admin, django.contrib.auth, django.contrib.contenttypes, django.contrib.sessions, django.contrib.messages, django.contrib.staticfiles. Se añaden las nuevas apps aquí
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myapp'
]

# Esto sirve para decirle a Django si va a procesar determinado tipo de dato de alguna forma. también se pueden añadir más

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

# TEMPLATES es una lista que contiene las configuraciones de los motores de plantillas a utilizar. Por defecto, Django utiliza el motor de plantillas de Django, pero también se pueden utilizar otros motores de plantillas como Jinja2 o Mako. Se añaden los nuevos motores de plantillas aquí
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Sirven en modulo de producción
WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

#Acá se agrega la base de datos que se va a utilizar. Por defecto, Django utiliza SQLite, pero también se pueden utilizar otros gestores de bases de datos como PostgreSQL, MySQL, Oracle, etc. Se añaden las nuevas bases de datos aquí
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators
# Aquí va como se validan las contraseñas de los usuarios. Por defecto, Django utiliza 4 validadores de contraseñas: UserAttributeSimilarityValidator, MinimumLengthValidator, CommonPasswordValidator y NumericPasswordValidator. Se pueden añadir más validadores de contraseñas aquí
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
# Es para decirle donde están los archivos estáticos, como html, como CSS, JavaScript, imágenes, etc. Por defecto, Django busca archivos estáticos en la carpeta static/ de cada aplicación. Se pueden añadir más carpetas de archivos estáticos aquí
STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
